name: time-tracker-ui-cd-stage

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  cd:
    runs-on: ubuntu-latest
    env:
        TF_WORKSPACE: stage
        WORKING_DIR: infrastructure/
        ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
        ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
        ARM_SUBSCRIPTION_ID: ${{secrets.TF_ARM_SUBSCRIPTION_ID}}
        ARM_TENANT_ID: ${{secrets.TF_ARM_TENANT_ID}}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get the release_version
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        echo $RELEASE_VERSION

    - name: Login to azure
      uses: Azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Build the docker image
      run: make build_prod

    - name: Publish docker image to stage azure container registry
      run: |
        make login publish acr=timetrackerservicestageregistry image_tag=$RELEASE_VERSION

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.9

    - name: Authenticate with the TF modules repository
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.INFRA_TERRAFORM_MODULES_SSH_PRIV_KEY }}

    - name: append secret to secret.auto.tfvars
      working-directory: ./${{ env.WORKING_DIR }}
      run: |
        ./append_secret.py CHROME_BIN /opt/google/chrome/google-chrome
        ./append_secret.py AUTHORITY "${{ secrets.AUTHORITY }}"
        ./append_secret.py CLIENT_ID "${{ secrets.CLIENT_ID }}"
        ./append_secret.py SCOPES "${{ secrets.SCOPES }}"
        ./append_secret.py STACK_EXCHANGE_ID "${{ secrets.STACK_EXCHANGE_ID }}"
        ./append_secret.py STACK_EXCHANGE_ACCESS_TOKEN "${{ secrets.STACK_EXCHANGE_ACCESS_TOKEN }}"
        ./append_secret.py AZURE_APP_CONFIGURATION_CONNECTION_STRING "${{ secrets.AZURE_APP_CONFIGURATION_CONNECTION_STRING }}"


    - name: Terraform Init
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform init

    - name: Terraform Apply
      working-directory: ${{ env.WORKING_DIR }}
      run: terraform apply -lock=false -var-file="${{ env.TF_WORKSPACE }}.tfvars" -var "image_tag=$RELEASE_VERSION" -auto-approve
